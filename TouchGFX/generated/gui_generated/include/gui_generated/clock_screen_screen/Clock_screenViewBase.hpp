/*********************************************************************************/
/********** THIS FILE IS GENERATED BY TOUCHGFX DESIGNER, DO NOT MODIFY ***********/
/*********************************************************************************/
#ifndef CLOCK_SCREENVIEWBASE_HPP
#define CLOCK_SCREENVIEWBASE_HPP

#include <gui/common/FrontendApplication.hpp>
#include <mvp/View.hpp>
#include <gui/clock_screen_screen/Clock_screenPresenter.hpp>
#include <touchgfx/widgets/Image.hpp>
#include <touchgfx/containers/Container.hpp>
#include <touchgfx/containers/clock/AnalogClock.hpp>
#include <touchgfx/widgets/Box.hpp>
#include <touchgfx/widgets/TextArea.hpp>
#include <touchgfx/widgets/TextAreaWithWildcard.hpp>
#include <touchgfx/containers/buttons/Buttons.hpp>
#include <touchgfx/EasingEquations.hpp>
#include <touchgfx/mixins/MoveAnimator.hpp>

class Clock_screenViewBase : public touchgfx::View<Clock_screenPresenter>
{
public:
    Clock_screenViewBase();
    virtual ~Clock_screenViewBase() {}
    virtual void setupScreen();
    virtual void handleKeyEvent(uint8_t key);

    /*
     * Virtual Action Handlers
     */
    virtual void hplusClicked()
    {
        // Override and implement this function in Clock_screen
    }

    virtual void hminusClicked()
    {
        // Override and implement this function in Clock_screen
    }

    virtual void mplusClicked()
    {
        // Override and implement this function in Clock_screen
    }

    virtual void mminusClicked()
    {
        // Override and implement this function in Clock_screen
    }

    virtual void setupClicked()
    {
        // Override and implement this function in Clock_screen
    }

protected:
    FrontendApplication& application() {
        return *static_cast<FrontendApplication*>(touchgfx::Application::getInstance());
    }

    /*
     * Member Declarations
     */
    touchgfx::Image clock_bkg;
    touchgfx::Container clock;
    touchgfx::AnalogClock watch;
    touchgfx::MoveAnimator< touchgfx::Container > clock_set;
    touchgfx::Box box2;
    touchgfx::TextArea hour;
    touchgfx::TextAreaWithOneWildcard hour_n;
    touchgfx::TextArea minute;
    touchgfx::TextAreaWithOneWildcard minute_n;
    touchgfx::TextButtonStyle< touchgfx::ClickButtonTrigger > setup;
    touchgfx::TextButtonStyle< touchgfx::ClickButtonTrigger > hplus;
    touchgfx::TextButtonStyle< touchgfx::ClickButtonTrigger > hminus;
    touchgfx::TextButtonStyle< touchgfx::ClickButtonTrigger > mplus;
    touchgfx::TextButtonStyle< touchgfx::ClickButtonTrigger > mminus;
    touchgfx::MoveAnimator< touchgfx::Container > quote;
    touchgfx::Box box1;
    touchgfx::TextAreaWithOneWildcard quote_txt;
    touchgfx::TextArea quote_h;
    touchgfx::ImageButtonStyle< touchgfx::ClickButtonTrigger > btn_pen;

    /*
     * Wildcard Buffers
     */
    static const uint16_t HOUR_N_SIZE = 3;
    touchgfx::Unicode::UnicodeChar hour_nBuffer[HOUR_N_SIZE];
    static const uint16_t MINUTE_N_SIZE = 3;
    touchgfx::Unicode::UnicodeChar minute_nBuffer[MINUTE_N_SIZE];
    static const uint16_t QUOTE_TXT_SIZE = 513;
    touchgfx::Unicode::UnicodeChar quote_txtBuffer[QUOTE_TXT_SIZE];

private:

    /*
     * Callback Declarations
     */
    touchgfx::Callback<Clock_screenViewBase, const touchgfx::AbstractButtonContainer&> flexButtonCallback;

    /*
     * Callback Handler Declarations
     */
    void flexButtonCallbackHandler(const touchgfx::AbstractButtonContainer& src);
    /*
     * Interaction Callback Declarations
     */
    touchgfx::Callback < Clock_screenViewBase, const touchgfx::MoveAnimator<touchgfx::Container>& > clock_set_outEndedCallback;


    /*
     * Interaction Handlers
     */
    void clock_set_outEndedCallbackHandler(const touchgfx::MoveAnimator<touchgfx::Container>& comp);

};

#endif // CLOCK_SCREENVIEWBASE_HPP
